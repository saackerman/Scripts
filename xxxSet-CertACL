<#
.SYNOPSIS
    Updates the Access Control List (ACL) for a specified certificate.

.DESCRIPTION
    This script retrieves a certificate, extracts its private key, retrieves current permissions,
    creates a new permission rule, adds the new permission to the ACL, and applies the updated permissions.

.PARAMETER CertificateId
    The ID of the certificate to retrieve.

.PARAMETER DomainUser
    The domain and user for whom the permission rule is created.

.EXAMPLE
    Set-CertACL -CertificateId "your-certificate-id" -DomainUser "DOMAIN\User"

.NOTES
    The script was created to grant private key access to a specified DOMAIN\User.


#>

function Set-CertACL {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true,
         HelpMessage = "This is the thumbprint of the certificate",
         Position = 0)]
        [string]$CertificateId,

        [Parameter(Mandatory = $true)]
        [string]$DomainUser
    )

    try {
        # Retrieve the certificate
        $cert = Get-ChildItem -Path Cert:\LocalMachine\My\$CertificateId
        if (-not $cert) {
            throw "Certificate with ID $CertificateId not found."
        }

        # Extract the private key
        $key = [System.Security.Cryptography.X509Certificates.RSACertificateExtensions]::GetRSAPrivateKey($cert)
        if (-not $key) {
            throw "Private key not found for certificate $CertificateId."
        }

        # Retrieve the current permissions
        $path = "$env:ALLUSERSPROFILE\Microsoft\Crypto\Keys\$($key.key.UniqueName)"
        $permissions = Get-Acl -Path $path

        # Create a new permission rule
        $rule = New-Object Security.AccessControl.FileSystemAccessRule($DomainUser, "Read", "Allow")

        # Add the new permission to the ACL
        $permissions.AddAccessRule($rule)

        # Apply the updated permissions
        Set-Acl -Path $path -AclObject $permissions

        Write-Output "Private key access granted to $DomainUser"
    }
    catch {
        Write-Error "Failed to set ACL: $_"
    }
}
